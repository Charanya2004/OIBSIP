# -*- coding: utf-8 -*-
"""Task 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QOj5zrpEhBdIacXIfrwgKQ4gfKS6kVPZ

# **Charanya R - Oasis Infobyte Task 1-Iris Flower Classification**
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Iris dataset
iris = load_iris()
# Convert the data to a pandas DataFrame for easier visualization

iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['target'] = iris.target

# Scatter plot of sepal length vs sepal width
sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', hue='target', data=iris_df)
plt.title('Sepal Length vs Sepal Width')
plt.show()

X = iris.data  # Features
y = iris.target  # Labels

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.svm import SVC

# Create an SVM classifier
model = SVC()

model.fit(X_train, y_train)



import numpy as np

# Function to plot decision boundaries
def plot_decision_boundary(model, X, y):
    h = .02  # step size in the mesh
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)
    plt.xlabel('Sepal Length (cm)')
    plt.ylabel('Sepal Width (cm)')
    plt.title('Decision Boundary')
    plt.show()

# Using only the first two features for simplicity
X_train_2d = X_train[:, :2]
X_test_2d = X_test[:, :2]

# Train the model on the 2D data
model_2d = SVC()
model_2d.fit(X_train_2d, y_train)

# Plot decision boundary
plot_decision_boundary(model_2d, X_test_2d, y_test)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Make predictions
predictions = model.predict(X_test)

# Calculate confusion matrix
cm = confusion_matrix(y_test, predictions)

# Normalize the confusion matrix
cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

# Plot using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm_normalized, annot=True, fmt=".2f", cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.title('Normalized Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()
accuracy = accuracy_score(y_test, predictions)
report = classification_report(y_test, predictions)
confusion_mat = confusion_matrix(y_test, predictions)

print(f"Accuracy: {accuracy}")
print("\nClassification Report:\n", report)
print("\nConfusion Matrix:\n", confusion_mat)